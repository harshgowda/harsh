{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled15.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harshgowda/harsh/blob/master/pattern%20programs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "89nmKwMiEtbW",
        "colab_type": "text"
      },
      "source": [
        "pattern programs\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jk7O6wCyEz00",
        "colab_type": "code",
        "outputId": "859b1a9e-a810-4212-9e09-18b078282086",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        }
      },
      "source": [
        "for i in range(0, 5):\n",
        "    for j in range(0, i+1):\n",
        "        print(\"* \",end=\"\")\n",
        "    print()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "* \n",
            "* * \n",
            "* * * \n",
            "* * * * \n",
            "* * * * * \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x4CxgqGYFo59",
        "colab_type": "code",
        "outputId": "3722187a-5dcc-4057-b87a-3d331644b202",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        }
      },
      "source": [
        "for i in range(0, 5):\n",
        "    for j in range(5, i, -1):\n",
        "        print(\"* \", end=\"\")\n",
        "    print()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "* * * * * \n",
            "* * * * \n",
            "* * * \n",
            "* * \n",
            "* \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IEW78_ddGNka",
        "colab_type": "code",
        "outputId": "8edc7c1c-05f9-49bb-a21e-19cc9f8ea5fc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 132
        }
      },
      "source": [
        "a = int(input(\"enter a number\"))\n",
        "for i in range(1,a+1):\n",
        "    print(\" \"*(a-i)+\"*\"*i)\n",
        "      for j in range(1,i+1):\n",
        "        print(\"*\",end=\"\")\n",
        "      print()\n",
        "for i in range((a-1),0,-1):\n",
        "    print(\" \"*(a-i)+\"*\"*i)\n",
        "      for j in range(1,i+1):\n",
        "        print(\"*\",end=\"\")\n",
        "      print()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-45-1563dabdc2b1>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    for j in range(1,i+1):\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "okejH4a6cGWQ",
        "colab_type": "code",
        "outputId": "c6039b47-9a59-4a88-9d20-bbb255b6e639",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "n=int(input(\"enter a number:\"))\n",
        "for i in range(n):\n",
        "    print('*'*(i+1))\n",
        "for i in range(n-1):\n",
        "    print('*'*(n-i-1))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a number:3\n",
            "*\n",
            "**\n",
            "***\n",
            "**\n",
            "*\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}